package common.esportschain.esports.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UId = new Property(1, String.class, "UId", false, "uid");
        public final static Property Email = new Property(2, String.class, "Email", false, "Email");
        public final static Property NickName = new Property(3, String.class, "NickName", false, "nickName");
        public final static Property Avatar = new Property(4, String.class, "Avatar", false, "avatar");
        public final static Property Password = new Property(5, String.class, "Password", false, "password");
        public final static Property IsProducer = new Property(6, String.class, "IsProducer", false, "isProducer");
        public final static Property Key = new Property(7, String.class, "Key", false, "key");
        public final static Property Token = new Property(8, String.class, "token", false, "token");
        public final static Property Authkey = new Property(9, int.class, "authkey", false, "authkey");
        public final static Property Authkeys = new Property(10, String.class, "authkeys", false, "authkeys");
        public final static Property OneKey = new Property(11, String.class, "oneKey", false, "oneKey");
        public final static Property TwoKey = new Property(12, String.class, "twoKey", false, "twoKey");
        public final static Property ThreeKey = new Property(13, String.class, "threeKey", false, "threeKey");
        public final static Property FourKey = new Property(14, String.class, "fourKey", false, "fourKey");
        public final static Property OneInt = new Property(15, int.class, "oneInt", false, "ontInt");
        public final static Property ThreeInt = new Property(16, int.class, "threeInt", false, "threeInt");
        public final static Property TwoInt = new Property(17, int.class, "twoInt", false, "twoInt");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"uid\" TEXT," + // 1: UId
                "\"Email\" TEXT," + // 2: Email
                "\"nickName\" TEXT," + // 3: NickName
                "\"avatar\" TEXT," + // 4: Avatar
                "\"password\" TEXT," + // 5: Password
                "\"isProducer\" TEXT," + // 6: IsProducer
                "\"key\" TEXT," + // 7: Key
                "\"token\" TEXT," + // 8: token
                "\"authkey\" INTEGER NOT NULL ," + // 9: authkey
                "\"authkeys\" TEXT," + // 10: authkeys
                "\"oneKey\" TEXT," + // 11: oneKey
                "\"twoKey\" TEXT," + // 12: twoKey
                "\"threeKey\" TEXT," + // 13: threeKey
                "\"fourKey\" TEXT," + // 14: fourKey
                "\"ontInt\" INTEGER NOT NULL ," + // 15: oneInt
                "\"threeInt\" INTEGER NOT NULL ," + // 16: threeInt
                "\"twoInt\" INTEGER NOT NULL );"); // 17: twoInt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UId = entity.getUId();
        if (UId != null) {
            stmt.bindString(2, UId);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(3, Email);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(4, NickName);
        }
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(5, Avatar);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(6, Password);
        }
 
        String IsProducer = entity.getIsProducer();
        if (IsProducer != null) {
            stmt.bindString(7, IsProducer);
        }
 
        String Key = entity.getKey();
        if (Key != null) {
            stmt.bindString(8, Key);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(9, token);
        }
        stmt.bindLong(10, entity.getAuthkey());
 
        String authkeys = entity.getAuthkeys();
        if (authkeys != null) {
            stmt.bindString(11, authkeys);
        }
 
        String oneKey = entity.getOneKey();
        if (oneKey != null) {
            stmt.bindString(12, oneKey);
        }
 
        String twoKey = entity.getTwoKey();
        if (twoKey != null) {
            stmt.bindString(13, twoKey);
        }
 
        String threeKey = entity.getThreeKey();
        if (threeKey != null) {
            stmt.bindString(14, threeKey);
        }
 
        String fourKey = entity.getFourKey();
        if (fourKey != null) {
            stmt.bindString(15, fourKey);
        }
        stmt.bindLong(16, entity.getOneInt());
        stmt.bindLong(17, entity.getThreeInt());
        stmt.bindLong(18, entity.getTwoInt());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UId = entity.getUId();
        if (UId != null) {
            stmt.bindString(2, UId);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(3, Email);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(4, NickName);
        }
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(5, Avatar);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(6, Password);
        }
 
        String IsProducer = entity.getIsProducer();
        if (IsProducer != null) {
            stmt.bindString(7, IsProducer);
        }
 
        String Key = entity.getKey();
        if (Key != null) {
            stmt.bindString(8, Key);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(9, token);
        }
        stmt.bindLong(10, entity.getAuthkey());
 
        String authkeys = entity.getAuthkeys();
        if (authkeys != null) {
            stmt.bindString(11, authkeys);
        }
 
        String oneKey = entity.getOneKey();
        if (oneKey != null) {
            stmt.bindString(12, oneKey);
        }
 
        String twoKey = entity.getTwoKey();
        if (twoKey != null) {
            stmt.bindString(13, twoKey);
        }
 
        String threeKey = entity.getThreeKey();
        if (threeKey != null) {
            stmt.bindString(14, threeKey);
        }
 
        String fourKey = entity.getFourKey();
        if (fourKey != null) {
            stmt.bindString(15, fourKey);
        }
        stmt.bindLong(16, entity.getOneInt());
        stmt.bindLong(17, entity.getThreeInt());
        stmt.bindLong(18, entity.getTwoInt());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IsProducer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Key
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // token
            cursor.getInt(offset + 9), // authkey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // authkeys
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // oneKey
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // twoKey
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // threeKey
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fourKey
            cursor.getInt(offset + 15), // oneInt
            cursor.getInt(offset + 16), // threeInt
            cursor.getInt(offset + 17) // twoInt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsProducer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setToken(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAuthkey(cursor.getInt(offset + 9));
        entity.setAuthkeys(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOneKey(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTwoKey(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setThreeKey(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFourKey(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOneInt(cursor.getInt(offset + 15));
        entity.setThreeInt(cursor.getInt(offset + 16));
        entity.setTwoInt(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
